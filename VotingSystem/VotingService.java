//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `VotingSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotingSystem;

public interface VotingService extends com.zeroc.Ice.Object
{
    void registerClient(String clientId, com.zeroc.Ice.Current current)
        throws VotingSystemException;

    void unregisterClient(String clientId, com.zeroc.Ice.Current current)
        throws VotingSystemException;

    VoterInfo getVotingInfo(String documentId, com.zeroc.Ice.Current current)
        throws VotingSystemException;

    VoterInfo[] performBatchQuery(String clientId, String[] documentIds, com.zeroc.Ice.Current current)
        throws VotingSystemException;

    void notifyObservers(String message, com.zeroc.Ice.Current current)
        throws VotingSystemException;

    String[] getServerLog(com.zeroc.Ice.Current current)
        throws VotingSystemException;

    void distributeTasks(String[] documentIds, com.zeroc.Ice.Current current)
        throws VotingSystemException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::VotingSystem::VotingService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::VotingSystem::VotingService";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerClient(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_clientId;
        iceP_clientId = istr.readString();
        inS.endReadParams();
        obj.registerClient(iceP_clientId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unregisterClient(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_clientId;
        iceP_clientId = istr.readString();
        inS.endReadParams();
        obj.unregisterClient(iceP_clientId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVotingInfo(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_documentId;
        iceP_documentId = istr.readString();
        inS.endReadParams();
        VoterInfo ret = obj.getVotingInfo(iceP_documentId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        VoterInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_performBatchQuery(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_clientId;
        String[] iceP_documentIds;
        iceP_clientId = istr.readString();
        iceP_documentIds = istr.readStringSeq();
        inS.endReadParams();
        VoterInfo[] ret = obj.performBatchQuery(iceP_clientId, iceP_documentIds, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        VoterInfoSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_notifyObservers(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_message;
        iceP_message = istr.readString();
        inS.endReadParams();
        obj.notifyObservers(iceP_message, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getServerLog(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.getServerLog(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_distributeTasks(VotingService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_documentIds;
        iceP_documentIds = istr.readStringSeq();
        inS.endReadParams();
        obj.distributeTasks(iceP_documentIds, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "distributeTasks",
        "getServerLog",
        "getVotingInfo",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "notifyObservers",
        "performBatchQuery",
        "registerClient",
        "unregisterClient"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_distributeTasks(this, in, current);
            }
            case 1:
            {
                return _iceD_getServerLog(this, in, current);
            }
            case 2:
            {
                return _iceD_getVotingInfo(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return _iceD_notifyObservers(this, in, current);
            }
            case 8:
            {
                return _iceD_performBatchQuery(this, in, current);
            }
            case 9:
            {
                return _iceD_registerClient(this, in, current);
            }
            case 10:
            {
                return _iceD_unregisterClient(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
