//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `VotingSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotingSystem;

public class VoterInfo implements java.lang.Cloneable,
                                  java.io.Serializable
{
    public String documentId;

    public VotingTable table;

    public boolean isPrimeFactorsPrime;

    public float responseTime;

    public VoterInfo()
    {
        this.documentId = "";
        this.table = new VotingTable();
    }

    public VoterInfo(String documentId, VotingTable table, boolean isPrimeFactorsPrime, float responseTime)
    {
        this.documentId = documentId;
        this.table = table;
        this.isPrimeFactorsPrime = isPrimeFactorsPrime;
        this.responseTime = responseTime;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        VoterInfo r = null;
        if(rhs instanceof VoterInfo)
        {
            r = (VoterInfo)rhs;
        }

        if(r != null)
        {
            if(this.documentId != r.documentId)
            {
                if(this.documentId == null || r.documentId == null || !this.documentId.equals(r.documentId))
                {
                    return false;
                }
            }
            if(this.table != r.table)
            {
                if(this.table == null || r.table == null || !this.table.equals(r.table))
                {
                    return false;
                }
            }
            if(this.isPrimeFactorsPrime != r.isPrimeFactorsPrime)
            {
                return false;
            }
            if(this.responseTime != r.responseTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::VotingSystem::VoterInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, documentId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, table);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPrimeFactorsPrime);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, responseTime);
        return h_;
    }

    public VoterInfo clone()
    {
        VoterInfo c = null;
        try
        {
            c = (VoterInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.documentId);
        VotingTable.ice_write(ostr, this.table);
        ostr.writeBool(this.isPrimeFactorsPrime);
        ostr.writeFloat(this.responseTime);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.documentId = istr.readString();
        this.table = VotingTable.ice_read(istr);
        this.isPrimeFactorsPrime = istr.readBool();
        this.responseTime = istr.readFloat();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, VoterInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public VoterInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        VoterInfo v = new VoterInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<VoterInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, VoterInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<VoterInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(VoterInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final VoterInfo _nullMarshalValue = new VoterInfo();

    /** @hidden */
    public static final long serialVersionUID = -1710777383L;
}
